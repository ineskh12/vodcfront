{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnityContext = void 0; // TODO remove from dir\n\n/**\n * The Unity Context.\n */\n\nvar UnityContext =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the Unity context model.\n   * @param {IUnityConfig} unityConfig The Unity config used to build the player.\n   */\n  function UnityContext(unityConfig) {\n    this.unityConfig = unityConfig;\n    /**\n     * A list of the UnityEvents binded to this unityContext.\n     * @private\n     * @type {IUnityEvent[]}\n     */\n\n    this.unityEvents = [];\n    if (typeof window !== \"undefined\" && typeof window.ReactUnityWebGL === \"undefined\") window.ReactUnityWebGL = {};\n  }\n  /**\n   * Sets the reference of the UnityInstance.\n   * @public\n   * @param {UnityInstance} unityInstance the target unityInstance.\n   */\n\n\n  UnityContext.prototype.setUnityInstance = function (unityInstance) {\n    this.unityInstance = unityInstance;\n  };\n  /**\n   * Quits the Unity Instance and clears it from memory.\n   * @public\n   */\n\n\n  UnityContext.prototype.quitUnityInstance = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(typeof this.unityInstance !== \"undefined\")) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.unityInstance.Quit()];\n\n          case 1:\n            _a.sent();\n\n            this.dispatchEventListener(\"quitted\");\n            this.unityInstance = undefined;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sends a message to the UnityInstance to invoke a public method.\n   * @public\n   * @param {string} gameObjectName the name of the game object in your Unity scene.\n   * @param {string} methodName the name of the public method on the game object.\n   * @param {string | number | boolean} parameter an optional method parameter.\n   */\n\n\n  UnityContext.prototype.send = function (gameObjectName, methodName, parameter) {\n    if (typeof this.unityInstance !== \"undefined\") if (typeof parameter === \"undefined\") this.unityInstance.SendMessage(gameObjectName, methodName);else this.unityInstance.SendMessage(gameObjectName, methodName, parameter);\n  };\n  /**\n   * Registers an event listener for the Unity player. These can be\n   * system events like when the player is initialized or loader and\n   * your custom events from Unity.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {Function} eventListener the event's function\n   */\n\n\n  UnityContext.prototype.on = function (eventName, eventListener) {\n    this.unityEvents.push({\n      eventName: eventName,\n      eventCallback: eventListener\n    });\n    if (typeof window !== \"undefined\") window.ReactUnityWebGL[eventName] = function () {\n      var parameters = [];\n\n      for (var _a = 0; _a < arguments.length; _a++) {\n        parameters[_a] = arguments[_a];\n      }\n\n      return eventListener.apply(void 0, parameters);\n    };\n  };\n  /**\n   * Removes all the Event Listeners with a specific Event Name.\n   * @public\n   * @param {string} eventName the event's name\n   * @example unityContext.removeEventListener(\"progress\");\n   */\n\n\n  UnityContext.prototype.removeEventListener = function (eventName) {\n    // TODO refactor to \"off\"?\n    for (var _i = 0; _i < this.unityEvents.length; _i++) if (this.unityEvents[_i].eventName === eventName) this.unityEvents.splice(_i, 1);\n\n    delete window.ReactUnityWebGL[eventName];\n  };\n  /**\n   * Removes all the Event Listeners.\n   * @public\n   * @example unityContext.removeAllEventListeners();\n   */\n\n\n  UnityContext.prototype.removeAllEventListeners = function () {\n    // TODO refactor to \"off\"?\n    for (var _i = 0; _i < this.unityEvents.length; _i++) delete window.ReactUnityWebGL[this.unityEvents[_i].eventName];\n\n    this.unityEvents = [];\n  };\n  /**\n   * Dispatches an event listener that has been registered using the on method.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {any} eventValue the event's value\n   * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n   */\n\n\n  UnityContext.prototype.dispatchEventListener = function (eventName, eventValue) {\n    for (var _a = 0, _b = this.unityEvents; _a < _b.length; _a++) {\n      var _unityEvent = _b[_a];\n      if (_unityEvent.eventName === eventName) _unityEvent.eventCallback(eventValue);\n    }\n  };\n  /**\n   * Enables or disabled the Fullscreen mode of the Unity Instance.\n   * @public\n   * @param {boolean} enabled\n   */\n\n\n  UnityContext.prototype.setFullscreen = function (enabled) {\n    if (typeof this.unityInstance !== \"undefined\") this.unityInstance.SetFullscreen(enabled === true ? 1 : 0);\n  };\n\n  return UnityContext;\n}();\n\nexports.UnityContext = UnityContext;","map":null,"metadata":{},"sourceType":"script"}
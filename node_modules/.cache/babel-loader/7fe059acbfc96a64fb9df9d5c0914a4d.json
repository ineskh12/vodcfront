{"ast":null,"code":"var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React dropdowns module\n * @module react/dropdowns\n */\n\n/* jshint quotmark:false */\n// jscs:disable validateQuoteMarks\n\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _button = require('./button');\n\nvar _button2 = babelHelpers.interopRequireDefault(_button);\n\nvar _caret = require('./caret');\n\nvar _caret2 = babelHelpers.interopRequireDefault(_caret);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\nvar dropdownClass = 'mui-dropdown',\n    menuClass = 'mui-dropdown__menu',\n    openClass = 'mui--is-open',\n    rightClass = 'mui-dropdown__menu--right';\n/**\n * Dropdown constructor\n * @class\n */\n\nvar Dropdown = function (_React$Component) {\n  babelHelpers.inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    babelHelpers.classCallCheck(this, Dropdown);\n\n    var _this = babelHelpers.possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));\n\n    _this.state = {\n      opened: false,\n      menuTop: 0\n    };\n    var cb = util.callback;\n    _this.selectCB = cb(_this, 'select');\n    _this.onClickCB = cb(_this, 'onClick');\n    _this.onOutsideClickCB = cb(_this, 'onOutsideClick');\n    _this.onKeyDownCB = cb(_this, 'onKeyDown');\n    return _this;\n  }\n\n  babelHelpers.createClass(Dropdown, [{\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState) {\n      var doc = document;\n\n      if (!this.state.opened && nextState.opened) {\n        doc.addEventListener('click', this.onOutsideClickCB);\n        doc.addEventListener('keydown', this.onKeyDownCB);\n      } else if (this.state.opened && !nextState.opened) {\n        doc.removeEventListener('click', this.onOutsideClickCB);\n        doc.removeEventListener('keydown', this.onKeyDownCB);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var doc = document;\n      doc.removeEventListener('click', this.onOutsideClickCB);\n      doc.removeEventListener('keydown', this.onKeyDownCB);\n    }\n  }, {\n    key: 'onClick',\n    value: function onClick(ev) {\n      // only left clicks\n      if (ev.button !== 0) return; // exit if toggle button is disabled\n\n      if (this.props.disabled) return;\n\n      if (!ev.defaultPrevented) {\n        this.toggle(); // execute <Dropdown> onClick method\n\n        var fn = this.props.onClick;\n        fn && fn(ev);\n      }\n    }\n  }, {\n    key: 'toggle',\n    value: function toggle() {\n      // exit if no menu element\n      if (!this.props.children) {\n        return util.raiseError('Dropdown menu element not found');\n      }\n\n      if (this.state.opened) this.close();else this.open();\n    }\n  }, {\n    key: 'open',\n    value: function open() {\n      // position menu element below toggle button\n      var wrapperRect = this.wrapperElRef.getBoundingClientRect(),\n          toggleRect = void 0;\n      toggleRect = this.buttonElRef.buttonElRef.getBoundingClientRect();\n      this.setState({\n        opened: true,\n        menuTop: toggleRect.top - wrapperRect.top + toggleRect.height\n      });\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this.setState({\n        opened: false\n      });\n    }\n  }, {\n    key: 'select',\n    value: function select(ev) {\n      // onSelect callback\n      if (this.props.onSelect && ev.target.tagName === 'A') {\n        this.props.onSelect(ev.target.getAttribute('data-mui-value'));\n      } // close menu\n\n\n      if (!ev.defaultPrevented) this.close();\n    }\n  }, {\n    key: 'onOutsideClick',\n    value: function onOutsideClick(ev) {\n      var isClickInside = this.wrapperElRef.contains(ev.target);\n      if (!isClickInside) this.close();\n    }\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(ev) {\n      // close menu on escape key\n      var key = ev.key;\n      if (key === 'Escape' || key === 'Esc') this.close();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var buttonEl = void 0,\n          menuEl = void 0,\n          labelEl = void 0;\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          color = _props.color,\n          variant = _props.variant,\n          size = _props.size,\n          label = _props.label,\n          alignMenu = _props.alignMenu,\n          onClick = _props.onClick,\n          onSelect = _props.onSelect,\n          disabled = _props.disabled,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'color', 'variant', 'size', 'label', 'alignMenu', 'onClick', 'onSelect', 'disabled']); // build label\n\n      if (jqLite.type(label) === 'string') {\n        labelEl = _react2.default.createElement('span', null, label, ' ', _react2.default.createElement(_caret2.default, null));\n      } else {\n        labelEl = label;\n      }\n\n      buttonEl = _react2.default.createElement(_button2.default, {\n        ref: function ref(el) {\n          _this2.buttonElRef = el;\n        },\n        type: 'button',\n        onClick: this.onClickCB,\n        color: color,\n        variant: variant,\n        size: size,\n        disabled: disabled\n      }, labelEl);\n\n      if (this.state.opened) {\n        var cs = {};\n        cs[menuClass] = true;\n        cs[openClass] = this.state.opened;\n        cs[rightClass] = alignMenu === 'right';\n        cs = util.classNames(cs);\n        menuEl = _react2.default.createElement('ul', {\n          ref: function ref(el) {\n            _this2.menuElRef = el;\n          },\n          className: cs,\n          style: {\n            top: this.state.menuTop\n          },\n          onClick: this.selectCB\n        }, children);\n      } else {\n        menuEl = _react2.default.createElement('div', null);\n      }\n\n      return _react2.default.createElement('div', babelHelpers.extends({}, reactProps, {\n        ref: function ref(el) {\n          _this2.wrapperElRef = el;\n        },\n        className: dropdownClass + ' ' + className\n      }), buttonEl, menuEl);\n    }\n  }]);\n  return Dropdown;\n}(_react2.default.Component);\n/** Define module API */\n\n\nDropdown.defaultProps = {\n  className: '',\n  color: 'default',\n  variant: 'default',\n  size: 'default',\n  label: '',\n  alignMenu: 'left',\n  onClick: null,\n  onSelect: null,\n  disabled: false\n};\nexports.default = Dropdown;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}